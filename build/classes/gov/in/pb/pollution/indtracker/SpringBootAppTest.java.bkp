package gov.in.pb.pollution.indtracker;

import static org.junit.Assert.assertEquals;

import java.util.ArrayList;
import java.util.List;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;

import gov.in.pb.pollution.indtracker.domain.Category;
import gov.in.pb.pollution.indtracker.repository.CategoryRepository;

@RunWith(SpringJUnit4ClassRunner.class)
@SpringBootTest(classes = SpringBootApp.class)
public class SpringBootAppTest {
	@Autowired
	CategoryRepository categoryRepository;

	@Before
	public void setUp() throws Exception {
		categoryRepository.deleteAll();
		Category pandemic = new Category("Pandemic", "Co-op game for wannabe disease control specailists");
		Category werewolf = new Category("Werewolf",
				"You must find out who's secretly the werewolf, before it's too late");
		Category camelUp = new Category("Camel Up", "A high stakes game of gambling and camel racing");
		categoryRepository.save(pandemic);
		categoryRepository.save(werewolf);
		categoryRepository.save(camelUp);
	}

	@Test
	public void loadGames() {
		List<Category> categories = (ArrayList<Category>) categoryRepository.findAll();
		assertEquals("Did not get all categories", 3, categories.size());
	}

	@Test
	public void testFindGame() throws Exception {
		List<Category> camelUpList = categoryRepository.findByName("Camel Up");
		assertEquals("Found wrong number of Camel Ups", 1, camelUpList.size());
		assertEquals("Found wrong name", "Camel Up", camelUpList.get(0).getName());
	}

	@Test
	public void testCRUD() throws Exception {
/*		// Create a new game
		Category munchkin = new Category("Munchkin", "A wild game for wild people.");
		categoryRepository.save(munchkin);

		// Assert it was created
		List<Category> foundCategory = categoryRepository.findByName(munchkin.getName());
		assertEquals("Did not find Munchkin", munchkin.getName(), foundCategory.get(0).getName());

		// Edit it's description
		String newDescription = "If you love rules that change, you'll love Munchkin!";
		foundCategory.get(0).setDescription(newDescription);

		// Save to the database (note that we can save not just single Entities, but
		// collections of them as well)
		categoryRepository.save(foundCategory);

		// Assert it updated
		List<Category> updatedCategory = categoryRepository.findByName(munchkin.getName());
		assertEquals("Did not update description", newDescription, updatedCategory.get(0).getDescription());

		// Delete game
		categoryRepository.delete(updatedCategory);

		// Assert not found
		List<Category> emptyCategory = categoryRepository.findByName(munchkin.getName());
		assertEquals("Should have returned no games", 0, emptyCategory.size());*/
	}

}
